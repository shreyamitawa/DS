#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*) malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void push(Node** head, int data) {
    Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

int pop(Node** head) {
    if (*head == NULL) {
        printf("Stack is empty.\n");
        return -1;
    }
    Node* temp = *head;
    int poppedData = temp->data;
    *head = (*head)->next;
    free(temp);
    return poppedData;
}

void enqueue(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

int dequeue(Node** head) {
    if (*head == NULL) {
        printf("Queue is empty.\n");
        return -1;
    }
    Node* temp = *head;
    int dequeuedData = temp->data;
    *head = (*head)->next;
    free(temp);
    return dequeuedData;
}

void printList(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    Node* stackHead = NULL;
    Node* queueHead = NULL;

    push(&stackHead, 1);
    push(&stackHead, 2);
    push(&stackHead, 3);
    printList(stackHead);

    enqueue(&queueHead, 1);
    enqueue(&queueHead, 2);
    enqueue(&queueHead, 3);
    printList(queueHead);

    printf("Popped from stack: %d\n", pop(&stackHead));
    printf("Dequeued from queue: %d\n", dequeue(&queueHead));

    printList(stackHead);
    printList(queueHead);

    return 0;
}
